# web_app.py
from flask import Flask, render_template, request, jsonify, redirect, url_for, session, flash, send_from_directory, abort, make_response, Response
import os
import json
import time
import shutil
from datetime import datetime
from dotenv import load_dotenv
import requests
import socket
import logging
import re
import functools
from urllib.parse import unquote, quote

# - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è -
logging.basicConfig(filename='audit.log',
                    level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# - –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è -
load_dotenv()

# - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è -
app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY", "super-secret-key-for-d-space-bot")

# - –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø -
app.config['TEMPLATES_AUTO_RELOAD'] = True
app.jinja_env.auto_reload = True
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0

# - –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ -
KNOWLEDGE_BASE = {}
BOOKINGS = []
conversation_history = {}
LOG_FILE = "bot_log.json"
BACKUPS_DIR = "backups"
os.makedirs(BACKUPS_DIR, exist_ok=True)

# - –ü—É—Ç–∏ -
KNOWLEDGE_FILE = "knowledge_base.json"
BOOKINGS_FILE = "bookings.json"
SUGGESTIONS_FILE = "suggestions.json"
MENU_FILE = "menu.json"
MENU_CATEGORIES_FILE = "menu_categories.json"

# - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é -
SYSTEM_CATEGORIES = ['attractions', 'events', 'services', 'info']

# - –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è -
suggestionMap = {}
MENU_CACHE = None

# --- –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: PostgreSQL –∏–ª–∏ —Ñ–∞–π–ª–æ–≤–∞—è ---
try:
    import psycopg2
    from psycopg2.extras import RealDictCursor
    import urllib.parse as urlparse
    POSTGRES_AVAILABLE = True
except ImportError:
    POSTGRES_AVAILABLE = False
    print("‚ÑπÔ∏è  psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")

def get_db_connection():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å SSL"""
    if not POSTGRES_AVAILABLE:
        return None
        
    try:
        database_url = os.getenv('DATABASE_URL')
        
        if not database_url:
            return None
            
        # –ü–∞—Ä—Å–∏–º URL –¥–ª—è Render
        url = urlparse.urlparse(database_url)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å SSL –¥–ª—è Render
        conn = psycopg2.connect(
            database=url.path[1:],
            user=url.username,
            password=url.password,
            host=url.hostname,
            port=url.port,
            sslmode='require',  # üî• –ö–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            sslrootcert=''      # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return None

def init_knowledge_db():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å DATABASE_URL)"""
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ÑπÔ∏è  DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        return False
        
    conn = get_db_connection()
    if not conn:
        return False
        
    try:
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS knowledge_base (
                id SERIAL PRIMARY KEY,
                question TEXT UNIQUE NOT NULL,
                answer TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_by VARCHAR(255) DEFAULT 'system'
            )
        """)
        
        conn.commit()
        cur.close()
        conn.close()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ knowledge_base –≥–æ—Ç–æ–≤–∞ –≤ PostgreSQL")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def get_default_knowledge():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    return {
        "–ø—Ä–∏–≤–µ—Ç": "üëã –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ D-Space! \n–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —É—Å–ª—É–≥",
        "–ø–æ–∫–∞": "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µ!",
        "—Å–ø–∞—Å–∏–±–æ": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! üòä"
    }

def load_knowledge_base():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ PostgreSQL –∏–ª–∏ —Ñ–∞–π–ª–∞"""
    global KNOWLEDGE_BASE
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ PostgreSQL
    conn = get_db_connection()
    if conn:
        try:
            cur = conn.cursor(cursor_factory=RealDictCursor)
            cur.execute("SELECT question, answer FROM knowledge_base ORDER BY question")
            rows = cur.fetchall()
            KNOWLEDGE_BASE = {row['question']: row['answer'] for row in rows}
            print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ PostgreSQL ({len(KNOWLEDGE_BASE)} –∑–∞–ø–∏—Å–µ–π)")
            cur.close()
            conn.close()
            return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ PostgreSQL: {e}")
    
    # –ï—Å–ª–∏ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    if os.path.exists(KNOWLEDGE_FILE):
        try:
            with open(KNOWLEDGE_FILE, "r", encoding="utf-8") as f:
                KNOWLEDGE_BASE = json.load(f)
            print(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ ({len(KNOWLEDGE_BASE)} –∑–∞–ø–∏—Å–µ–π)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
            KNOWLEDGE_BASE = get_default_knowledge()
    else:
        KNOWLEDGE_BASE = get_default_knowledge()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –±–∞–∑—É –≤ —Ñ–∞–π–ª
        try:
            with open(KNOWLEDGE_FILE, "w", encoding="utf-8") as f:
                json.dump(KNOWLEDGE_BASE, f, ensure_ascii=False, indent=4)
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ñ–∞–π–ª–æ–≤–∞—è –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def save_knowledge_base():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –≤ PostgreSQL –∏–ª–∏ —Ñ–∞–π–ª"""
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ PostgreSQL
    conn = get_db_connection()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute("DELETE FROM knowledge_base")
            
            for question, answer in KNOWLEDGE_BASE.items():
                cur.execute(
                    "INSERT INTO knowledge_base (question, answer) VALUES (%s, %s)",
                    (question.strip().lower(), answer.strip())
                )
            
            conn.commit()
            cur.close()
            conn.close()
            print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ PostgreSQL")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ PostgreSQL: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    try:
        with open(KNOWLEDGE_FILE, "w", encoding="utf-8") as f:
            json.dump(KNOWLEDGE_BASE, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
        return False

def add_knowledge_item(question, answer, created_by="admin"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –≤ PostgreSQL
    conn = get_db_connection()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute("""
                INSERT INTO knowledge_base (question, answer, created_by) 
                VALUES (%s, %s, %s)
                ON CONFLICT (question) 
                DO UPDATE SET 
                    answer = EXCLUDED.answer,
                    updated_at = CURRENT_TIMESTAMP
            """, (question.strip().lower(), answer.strip(), created_by))
            
            conn.commit()
            cur.close()
            conn.close()
            print(f"‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ PostgreSQL: '{question}'")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ PostgreSQL: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    KNOWLEDGE_BASE[question.strip().lower()] = answer.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (–¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏)
    try:
        with open(KNOWLEDGE_FILE, "w", encoding="utf-8") as f:
            json.dump(KNOWLEDGE_BASE, f, ensure_ascii=False, indent=4)
        print(f"‚úÖ –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: '{question}'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
    
    return True

def update_knowledge_item(old_question, new_question, answer, created_by="admin"):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –≤ PostgreSQL
    conn = get_db_connection()
    if conn:
        try:
            cur = conn.cursor()
            
            if old_question != new_question:
                # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
                cur.execute("DELETE FROM knowledge_base WHERE question = %s", (old_question,))
            
            cur.execute("""
                INSERT INTO knowledge_base (question, answer, created_by) 
                VALUES (%s, %s, %s)
                ON CONFLICT (question) 
                DO UPDATE SET 
                    answer = EXCLUDED.answer,
                    updated_at = CURRENT_TIMESTAMP
            """, (new_question.strip().lower(), answer.strip(), created_by))
            
            conn.commit()
            cur.close()
            conn.close()
            print(f"‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ PostgreSQL: '{old_question}' -> '{new_question}'")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ PostgreSQL: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    if old_question in KNOWLEDGE_BASE:
        del KNOWLEDGE_BASE[old_question]
    KNOWLEDGE_BASE[new_question.strip().lower()] = answer.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    try:
        with open(KNOWLEDGE_FILE, "w", encoding="utf-8") as f:
            json.dump(KNOWLEDGE_BASE, f, ensure_ascii=False, indent=4)
        print(f"‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ: '{old_question}' -> '{new_question}'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
    
    return True

def delete_knowledge_item(question):
    """–£–¥–∞–ª—è–µ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ PostgreSQL
    conn = get_db_connection()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute("DELETE FROM knowledge_base WHERE question = %s", (question.strip().lower(),))
            conn.commit()
            cur.close()
            conn.close()
            print(f"‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ PostgreSQL: '{question}'")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ PostgreSQL: {e}")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    if question in KNOWLEDGE_BASE:
        del KNOWLEDGE_BASE[question]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        try:
            with open(KNOWLEDGE_FILE, "w", encoding="utf-8") as f:
                json.dump(KNOWLEDGE_BASE, f, ensure_ascii=False, indent=4)
            print(f"‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞: '{question}'")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª: {e}")
            return False
    
    return False

def search_knowledge(query):
    """–ò—â–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    conn = get_db_connection()
    if conn:
        try:
            cur = conn.cursor(cursor_factory=RealDictCursor)
            cur.execute("""
                SELECT question, answer 
                FROM knowledge_base 
                WHERE question ILIKE %s
                ORDER BY question
            """, (f'%{query}%',))
            
            results = cur.fetchall()
            cur.close()
            conn.close()
            return results
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ PostgreSQL: {e}")
    
    # –ï—Å–ª–∏ PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    results = []
    for question, answer in KNOWLEDGE_BASE.items():
        if query.lower() in question.lower():
            results.append({'question': question, 'answer': answer})
    return results

# - –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è -
def no_cache(view):
    @functools.wraps(view)
    def no_cache_view(*args, **kwargs):
        response = make_response(view(*args, **kwargs))
        response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
        return response
    return no_cache_view

# - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ -

def normalize_text(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —É–¥–∞–ª—è–µ—Ç –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è"""
    if not text:
        return ""
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text = text.lower()
    
    # –£–¥–∞–ª—è–µ–º –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø—Ä–æ–±–µ–ª—ã)
    text = re.sub(r'[^\w\s]', '', text)
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
    text = re.sub(r'\s+', ' ', text)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    return text.strip()

def find_in_knowledge_base(question):
    """–ò—â–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
    normalized_question = normalize_text(question)
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å)
    if question in KNOWLEDGE_BASE:
        return KNOWLEDGE_BASE[question]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    for key, value in KNOWLEDGE_BASE.items():
        if normalize_text(key) == normalized_question:
            return value
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á)
    for key, value in KNOWLEDGE_BASE.items():
        normalized_key = normalize_text(key)
        if normalized_key in normalized_question or normalized_question in normalized_key:
            return value
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∏–µ –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞)
    question_words = set(normalized_question.split())
    if len(question_words) > 1:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        best_match = None
        best_score = 0
        
        for key, value in KNOWLEDGE_BASE.items():
            normalized_key = normalize_text(key)
            key_words = set(normalized_key.split())
            
            # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–ª–æ–≤
            common_words = question_words.intersection(key_words)
            score = len(common_words)
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
            if score > best_score and score >= max(1, len(question_words) * 0.5):
                best_score = score
                best_match = value
        
        if best_match:
            return best_match
    
    return None

def load_bookings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ JSON"""
    global BOOKINGS
    if os.path.exists(BOOKINGS_FILE):
        try:
            with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
                BOOKINGS = json.load(f)
            print("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
    else:
        BOOKINGS = []
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

def save_bookings():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ JSON"""
    try:
        with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(BOOKINGS, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")

def load_suggestion_map():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏–∑ JSON"""
    global suggestionMap
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    if os.path.exists(SUGGESTIONS_FILE):
        try:
            with open(SUGGESTIONS_FILE, "r", encoding="utf-8") as f:
                suggestionMap = json.load(f)
            print("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞")
            return  # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {e}")
            suggestionMap = {}
    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    suggestionMap = {
        "vr": [
            {"text": "–ò–≥—Ä—ã", "question": "–∏–≥—Ä—ã –≤ vr", "answer": "–£ –Ω–∞—Å –µ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ VR-–∏–≥—Ä—ã: —ç–∫—à–µ–Ω—ã, –≥–æ–Ω–∫–∏, –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏! üéÆ"},
            {"text": "–¶–µ–Ω—ã", "question": "—Å—Ç–æ–∏–º–æ—Å—Ç—å vr", "answer": "VR-—Å–µ–∞–Ω—Å —Å—Ç–æ–∏—Ç –æ—Ç 300 —Ä—É–±–ª–µ–π –∑–∞ 30 –º–∏–Ω—É—Ç! üí∞"},
            {"text": "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "question": "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å vr", "answer": "–ß—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å VR, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! üìÖ"},
            {"text": "–ü—Ä–∞–≤–∏–ª–∞", "question": "–ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ vr", "answer": "–í VR-–∑–æ–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏! ‚ö†Ô∏è"}
        ],
        "–±–∞—Ç—É—Ç—ã": [
            {"text": "–î–ª—è –¥–µ—Ç–æ–∫?", "question": "–º–æ–∂–Ω–æ –ª–∏ –Ω–∞ –±–∞—Ç—É—Ç—ã —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –¥–µ—Ç—å–º–∏", "answer": "–î–∞, —É –Ω–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –±–∞—Ç—É—Ç—ã –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 3 –ª–µ—Ç! üë∂"},
            {"text": "–¶–µ–Ω—ã", "question": "—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–∞—Ç—É—Ç–æ–≤", "answer": "–ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä - –æ—Ç 500 —Ä—É–±–ª–µ–π –∑–∞ —á–∞—Å! üèÄ"},
            {"text": "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "question": "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –±–∞—Ç—É—Ç—ã", "answer": "–ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –±–∞—Ç—É—Ç—ã —á–µ—Ä–µ–∑ –Ω–∞—à—É —Å–∏—Å—Ç–µ–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è! üéØ"},
            {"text": "–ê–Ω–∏–º–∞—Ç–æ—Ä", "question": "–µ—Å—Ç—å –ª–∏ –∞–Ω–∏–º–∞—Ç–æ—Ä –Ω–∞ –±–∞—Ç—É—Ç—ã", "answer": "–î–∞, –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –∞–Ω–∏–º–∞—Ç–æ—Ä–∞ –¥–ª—è –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤! üé™"}
        ],
        "default": [
            {"text": "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "question": "—Ö–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "answer": "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞! üìã"},
            {"text": "–¶–µ–Ω—ã", "question": "—Ü–µ–Ω—ã", "answer": "–¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞. –£—Ç–æ—á–Ω–∏—Ç–µ —É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞! üíµ"}
        ]
    }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    try:
        with open(SUGGESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(suggestionMap, f, ensure_ascii=False, indent=4)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª suggestions.json –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: {e}")

def save_suggestion_map():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –≤ JSON"""
    try:
        with open(SUGGESTIONS_FILE, "w", encoding="utf-8") as f:
            json.dump(suggestionMap, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫: {e}")

def load_menu_categories():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    if os.path.exists(MENU_CATEGORIES_FILE):
        try:
            with open(MENU_CATEGORIES_FILE, 'r', encoding='utf-8') as f:
                categories = json.load(f)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –æ–∂–∏–¥–∞–µ–º—É—é —à–∞–±–ª–æ–Ω–æ–º
            return {
                "system_categories": {
                    "attractions": "üé™ –ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã",
                    "events": "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    "services": "üõ†Ô∏è –£—Å–ª—É–≥–∏",
                    "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                },
                "custom_categories": {k: v for k, v in categories.items() 
                                    if k not in ['attractions', 'events', 'services', 'info']}
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é: {e}")
            return {
                "system_categories": {
                    "attractions": "üé™ –ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã",
                    "events": "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    "services": "üõ†Ô∏è –£—Å–ª—É–≥–∏",
                    "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                },
                "custom_categories": {}
            }
    else:
        default_categories = {
            "attractions": "üé™ –ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã",
            "events": "üéâ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            "services": "üõ†Ô∏è –£—Å–ª—É–≥–∏",
            "info": "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        }
        save_menu_categories(default_categories)
        return {
            "system_categories": default_categories,
            "custom_categories": {}
        }

def save_menu_categories(categories_dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –≤ JSON —Ñ–∞–π–ª."""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–ª–æ—Å–∫–∏–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        flat_categories = {}
        if "system_categories" in categories_dict:
            flat_categories.update(categories_dict["system_categories"])
        if "custom_categories" in categories_dict:
            flat_categories.update(categories_dict["custom_categories"])
        with open(MENU_CATEGORIES_FILE, 'w', encoding='utf-8') as f:
            json.dump(flat_categories, f, ensure_ascii=False, indent=2)
        print("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é: {e}")

def load_menu():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–Ω—é –∏–∑ JSON"""
    global MENU_CACHE
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
    if MENU_CACHE is not None:
        return MENU_CACHE
    menu_items = []
    if os.path.exists(MENU_FILE):
        try:
            with open(MENU_FILE, "r", encoding="utf-8") as f:
                menu_items = json.load(f)
            print("‚úÖ –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            MENU_CACHE = menu_items
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {e}")
    else:
        menu_items = [
            {"admin_text": "VR-–∑–æ–Ω—ã", "display_text": "üéÆ VR-–∑–æ–Ω—ã ‚Äî –æ—Ç 300 ‚ÇΩ", "question": "vr", "category": "attractions", "price_info": "–æ—Ç 300 ‚ÇΩ", "suggestion_topic": "vr"},
            {"admin_text": "–ë–∞—Ç—É—Ç—ã", "display_text": "üèÄ –ë–∞—Ç—É—Ç–Ω—ã–π —Ü–µ–Ω—Ç—Ä ‚Äî –æ—Ç 500 ‚ÇΩ", "question": "–±–∞—Ç—É—Ç—ã", "category": "attractions", "price_info": "–æ—Ç 500 ‚ÇΩ", "suggestion_topic": "–±–∞—Ç—É—Ç—ã"},
            {"admin_text": "–ù–µ—Ä—Ñ", "display_text": "üî´ –ù–µ—Ä—Ñ-–∞—Ä–µ–Ω–∞ ‚Äî –æ—Ç 2500 ‚ÇΩ", "question": "–Ω–µ—Ä—Ñ", "category": "attractions", "price_info": "–æ—Ç 2500 ‚ÇΩ", "suggestion_topic": "default"},
            {"admin_text": "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "display_text": "üéâ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "question": "–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "category": "events", "price_info": "", "suggestion_topic": "default"},
            {"admin_text": "–í—ã–ø—É—Å–∫–Ω—ã–µ", "display_text": "üéì –í—ã–ø—É—Å–∫–Ω—ã–µ", "question": "–≤—ã–ø—É—Å–∫–Ω—ã–µ", "category": "events", "price_info": "", "suggestion_topic": "default"},
            {"admin_text": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "display_text": "üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "question": "–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", "category": "events", "price_info": "", "suggestion_topic": "default"}
        ]
        with open(MENU_FILE, "w", encoding="utf-8") as f:
            json.dump(menu_items, f, ensure_ascii=False, indent=4)
        print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª menu.json –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        MENU_CACHE = menu_items
    return menu_items

def save_menu(menu_items):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ–Ω—é –≤ JSON"""
    try:
        with open(MENU_FILE, "w", encoding="utf-8") as f:
            json.dump(menu_items, f, ensure_ascii=False, indent=4)
        print("‚úÖ –ú–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        # üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        global MENU_CACHE
        MENU_CACHE = menu_items
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–Ω—é: {e}")

# - –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ -
load_knowledge_base()
load_bookings()
load_suggestion_map()
load_menu()

# - –ú–∞—Ä—à—Ä—É—Ç—ã -

@app.route("/debug-database")
def debug_database():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    database_url = os.getenv('DATABASE_URL')
    file_exists = os.path.exists(KNOWLEDGE_FILE)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL
    postgres_status = "unknown"
    postgres_count = 0
    conn = get_db_connection()
    if conn:
        try:
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) as count FROM knowledge_base")
            result = cur.fetchone()
            postgres_count = result[0] if result else 0
            postgres_status = "connected"
            cur.close()
            conn.close()
        except Exception as e:
            postgres_status = f"error: {e}"
    else:
        postgres_status = "not_connected"
    
    # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª–µ
    file_count = len(KNOWLEDGE_BASE) if KNOWLEDGE_BASE else 0
    
    debug_info = {
        "postgres_available": POSTGRES_AVAILABLE,
        "database_url_set": bool(database_url),
        "postgres_status": postgres_status,
        "postgres_record_count": postgres_count,
        "file_exists": file_exists,
        "file_record_count": file_count,
        "knowledge_base_keys": list(KNOWLEDGE_BASE.keys())[:10] if KNOWLEDGE_BASE else [],
        "current_mode": "PostgreSQL" if postgres_status == "connected" else "File"
    }
    
    return jsonify(debug_info)

@app.route("/clear-menu-cache")
def clear_menu_cache():
    global MENU_CACHE
    MENU_CACHE = None
    load_menu()
    return "‚úÖ –ö—ç—à –º–µ–Ω—é –æ—á–∏—â–µ–Ω!"

@app.route("/voice-ask", methods=["POST"])
def voice_ask():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        data = request.json
        question = data.get("question", "").strip().lower()
        
        if not question:
            return jsonify({"answer": "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."})
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å
        logging.info(f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å: {question}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = find_in_knowledge_base(question)
        source = "knowledge_base"
        
        if not response:
            try:
                response = call_yandex_gpt(question)
                source = "yandex_gpt"
            except Exception as e:
                response = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                source = "error"
        
        log_interaction(f"[VOICE] {question}", response, source)
        return jsonify({"answer": response})
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({"answer": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"})

@app.route("/")
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞"""
    try:
        data = request.json
        question = data.get("message", "").strip()
        
        print(f"\nüîç ===== –ù–û–í–´–ô –ó–ê–ü–†–û–°: '{question}' =====")

        if not question:
            return jsonify({"response": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.", "source": "error", "suggestions": []})

        # üî• –£–ü–†–û–©–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê - –®–ê–ì 1: –ò—â–µ–º —Ç–µ–º—É –≤ –º–µ–Ω—é
        menu_items = load_menu()
        menu_topic = None
        
        for item in menu_items:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–µ–Ω—é
            if normalize_text(item["question"]) == normalize_text(question):
                menu_topic = item.get("suggestion_topic")
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ–º–∞ –≤ –º–µ–Ω—é: '{menu_topic}'")
                break
        
        # üî• –®–ê–ì 2: –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if not menu_topic:
            print("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏")
            suggestions = [{"text": s["text"], "question": s["question"]} for s in suggestionMap.get("default", [])]
            
            # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –í –ë–ê–ó–ï –ó–ù–ê–ù–ò–ô
            response = find_in_knowledge_base(question) or call_yandex_gpt(question)
            source = "knowledge_base" if find_in_knowledge_base(question) else "yandex_gpt"
            
            # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            log_interaction(question, response, source)
            
            return jsonify({
                "response": response,
                "source": source,
                "suggestions": suggestions
            })
        
        # üî• –®–ê–ì 3: –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–µ–º—ã
        topic_suggestions = suggestionMap.get(menu_topic, [])
        suggestions = [{"text": s["text"], "question": s["question"]} for s in topic_suggestions]
        print(f"üìã –ü–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è —Ç–µ–º—ã '{menu_topic}': {len(suggestions)}")
        
        # üî• –®–ê–ì 4: –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö —ç—Ç–æ–π —Ç–µ–º—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
        response = None
        source = "suggestion_map"
        
        for suggestion in topic_suggestions:
            if normalize_text(suggestion["question"]) == normalize_text(question):
                response = suggestion["answer"]
                print(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö")
                break
        
        # üî• –®–ê–ì 5: –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        if not response:
            response = find_in_knowledge_base(question)
            source = "knowledge_base"
            if response:
                print(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫)")
        
        # üî• –®–ê–ì 6: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT
        if not response:
            response = call_yandex_gpt(question)
            source = "yandex_gpt"
            print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Yandex GPT")
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –æ—Ç–≤–µ—Ç='{response[:50]}...', –ø–æ–¥—Å–∫–∞–∑–æ–∫={len(suggestions)}")
        
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ—Ç–≤–µ—Ç–∞
        log_interaction(question, response, source)
        
        return jsonify({
            "response": response,
            "source": source,
            "suggestions": suggestions
        })
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        log_interaction(question, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", "error")
        return jsonify({"response": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", "source": "error", "suggestions": []})

@app.route("/debug-suggestions")
def debug_suggestions():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    menu_items = load_menu()
    debug_info = {
        "menu_items": menu_items,
        "suggestion_topics": list(suggestionMap.keys()),
        "menu_categories": load_menu_categories()
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∫–Ω–æ–ø–∫—É "–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏"
    platnie_uslugi_item = None
    for item in menu_items:
        if normalize_text(item.get("question")) == normalize_text("–ø–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏"):
            platnie_uslugi_item = item
            break
    
    debug_info["platnie_uslugi"] = platnie_uslugi_item
    debug_info["platnie_uslugi_suggestions"] = suggestionMap.get("maniuslugi", [])
    
    return jsonify(debug_info)

@app.route("/ask", methods=["POST"])
def ask():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
    data = request.json
    question = data.get("question", "").strip()
    if not question:
        return jsonify({"answer": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å."})
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
    response = find_in_knowledge_base(question)
    source = "knowledge_base"
    
    if not response:
        try:
            response = call_yandex_gpt(question)
            source = "yandex_gpt"
        except Exception as e:
            response = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            source = "error"
    
    log_interaction(question, response, source)
    return jsonify({"answer": response})

@app.route("/feedback", methods=["POST"])
def feedback():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞"""
    data = request.json
    question = data.get("question")
    feedback = data.get("feedback")
    feedback_file = "feedback.json"
    logs = []
    if os.path.exists(feedback_file):
        try:
            with open(feedback_file, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
        except:
            pass
    logs.append({
        "timestamp": datetime.now().isoformat(),
        "question": question,
        "feedback": feedback
    })
    try:
        with open(feedback_file, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=4)
        return jsonify({"status": "ok"})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/suggestions/<topic>")
def get_suggestions_by_topic(topic):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã"""
    try:
        # –ò—â–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º—ã
        suggestions = suggestionMap.get(topic.lower(), [])
        # –ï—Å–ª–∏ –¥–ª—è —Ç–µ–º—ã –Ω–µ—Ç –ø–æ–¥—Å–∫–∞–∑–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if not suggestions:
            suggestions = suggestionMap.get("default", [])
        return jsonify({"suggestions": suggestions})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –¥–ª—è —Ç–µ–º—ã {topic}: {e}")
        return jsonify({"suggestions": []})

@app.route("/api/menu-display")
def get_menu_display():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    menu_items = load_menu()
    display_items = []
    for item in menu_items:
        display_items.append({
            "text": item.get("display_text", item.get("admin_text", "")),
            "question": item.get("question", ""),
            "suggestion_topic": item.get("suggestion_topic", "default")
        })
    return jsonify(display_items)

@app.route("/admin/suggestions")
def admin_suggestions():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    return render_template("admin/suggestions.html", suggestion_map=suggestionMap)

@app.route("/admin/suggestions", methods=["POST"])
def add_suggestion():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å –æ—Ç–≤–µ—Ç–æ–º"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    topic = request.form.get("topic").strip().lower()
    text = request.form.get("suggestion-text").strip()
    question = request.form.get("suggestion-question").strip().lower()
    answer = request.form.get("suggestion-answer").strip()
    if not topic or not text or not question or not answer:
        flash("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "error")
        return redirect(url_for("admin_suggestions"))
    if topic not in suggestionMap:
        suggestionMap[topic] = []
    if any(s["text"] == text for s in suggestionMap[topic]):
        flash("‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "error")
        return redirect(url_for("admin_suggestions"))
    # –î–æ–±–∞–≤–ª—è–µ–º answer –≤ –ø–æ–¥—Å–∫–∞–∑–∫—É
    suggestionMap[topic].append({
        "text": text,
        "question": question,
        "answer": answer
    })
    save_suggestion_map()
    flash("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", "success")
    return redirect(url_for("admin_suggestions"))

@app.route("/suggestion-answer", methods=["POST"])
def get_suggestion_answer():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
    data = request.json
    question = data.get("question", "").strip()
    if not question:
        return jsonify({"answer": "‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400

    normalized_question = normalize_text(question)
    
    # –ò—â–µ–º –æ—Ç–≤–µ—Ç –≤ suggestionMap —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    for topic, suggestions in suggestionMap.items():
        for suggestion in suggestions:
            suggestion_question = suggestion.get("question", "").strip()
            if normalize_text(suggestion_question) == normalized_question:
                return jsonify({"answer": suggestion.get("answer", "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")})

    return jsonify({"answer": "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

@app.route("/admin/suggestions/delete/<topic>/<text>")
def delete_suggestion(topic, text):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ URL
    text = unquote(text)
    if topic in suggestionMap:
        suggestionMap[topic] = [s for s in suggestionMap[topic] if s["text"] != text]
        save_suggestion_map()
        flash("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–¥–∞–ª–µ–Ω–∞", "success")
    else:
        flash("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", "error")
    return redirect(url_for("admin_suggestions"))

@app.route("/admin/suggestions/edit/<topic>/<text>", methods=["GET", "POST"])
def edit_suggestion(topic, text):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ URL
    text = unquote(text)
    if request.method == "GET":
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        suggestion_to_edit = None
        if topic in suggestionMap:
            for suggestion in suggestionMap[topic]:
                if suggestion["text"] == text:
                    suggestion_to_edit = suggestion
                    break
        if not suggestion_to_edit:
            flash("‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
            return redirect(url_for("admin_suggestions"))
        return render_template("admin/suggestions.html", 
                             suggestion_map=suggestionMap,
                             edit_suggestion=suggestion_to_edit,
                             edit_topic=topic)
    else:  # POST - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        new_topic = request.form.get("topic").strip().lower()
        new_text = request.form.get("suggestion-text").strip()
        new_question = request.form.get("suggestion-question").strip().lower()
        new_answer = request.form.get("suggestion-answer").strip()
        if not new_topic or not new_text or not new_question or not new_answer:
            flash("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "error")
            return redirect(url_for("admin_suggestions"))
        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        updated = False
        if topic in suggestionMap:
            for i, suggestion in enumerate(suggestionMap[topic]):
                if suggestion["text"] == text:
                    # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å —Ç–µ–º–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
                    if new_topic != topic:
                        # –£–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–µ–º—ã
                        suggestionMap[topic].pop(i)
                        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é —Ç–µ–º—É
                        if new_topic not in suggestionMap:
                            suggestionMap[new_topic] = []
                        suggestionMap[new_topic].append({
                            "text": new_text,
                            "question": new_question,
                            "answer": new_answer
                        })
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
                        suggestionMap[topic][i] = {
                            "text": new_text,
                            "question": new_question,
                            "answer": new_answer
                        }
                    save_suggestion_map()
                    flash("‚úÖ –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", "success")
                    logging.info(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {topic}/{text} -> {new_topic}/{new_text}")
                    updated = True
                    break
        if not updated:
            flash("‚ùå –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
        return redirect(url_for("admin_suggestions"))

@app.route("/admin/suggestions/update", methods=["POST"])
def update_suggestion():
    """API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏"""
    if not session.get("admin_logged_in"):
        return jsonify({"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
    try:
        topic = request.form.get("topic")
        old_text = request.form.get("old_text")
        new_text = request.form.get("text")
        new_question = request.form.get("question")
        new_answer = request.form.get("answer")
        if not all([topic, old_text, new_text, new_question, new_answer]):
            return jsonify({"success": False, "error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
        if topic in suggestionMap:
            for i, suggestion in enumerate(suggestionMap[topic]):
                if suggestion["text"] == old_text:
                    suggestionMap[topic][i] = {
                        "text": new_text,
                        "question": new_question,
                        "answer": new_answer
                    }
                    save_suggestion_map()
                    return jsonify({"success": True})
        return jsonify({"success": False, "error": "–ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"})
    except Exception as e:
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

@app.route("/admin/menu")
def admin_menu():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    menu_items = load_menu()
    categories = load_menu_categories()
    return render_template("admin/menu_edit.html", 
                         menu_items=menu_items,
                         categories=categories)

@app.route("/admin/menu/add", methods=["POST"])
def add_menu_item():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        return jsonify({"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
    try:
        admin_text = request.form.get("admin_text", "").strip()
        display_text = request.form.get("display_text", "").strip()
        question = request.form.get("question", "").strip().lower()
        category = request.form.get("category", "attractions")
        price_info = request.form.get("price_info", "")
        suggestion_topic = request.form.get("suggestion_topic", "default")
        if not admin_text or not display_text or not question:
            return jsonify({"success": False, "error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
        menu_items = load_menu()
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if any(item.get("admin_text") == admin_text for item in menu_items):
            return jsonify({"success": False, "error": "–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
        if any(item.get("question") == question for item in menu_items):
            return jsonify({"success": False, "error": "–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É
        new_item = {
            "admin_text": admin_text,
            "display_text": display_text,
            "question": question,
            "category": category,
            "price_info": price_info,
            "suggestion_topic": suggestion_topic
        }
        menu_items.append(new_item)
        save_menu(menu_items)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: {admin_text} -> {question} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

@app.route("/admin/menu/edit/<int:index>", methods=["GET"])
def edit_menu_item_form(index):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    menu_items = load_menu()
    categories = load_menu_categories()
    if 0 <= index < len(menu_items):
        item_to_edit = menu_items[index]
        return render_template("admin/menu_edit.html", 
                             menu_items=menu_items,
                             categories=categories,
                             edit_item=item_to_edit,
                             edit_index=index)
    else:
        flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏", "error")
        return redirect(url_for("admin_menu"))

@app.route("/admin/menu/edit/<int:index>", methods=["POST"])
def edit_menu_item(index):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        return jsonify({"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
    try:
        menu_items = load_menu()
        if not (0 <= index < len(menu_items)):
            return jsonify({"success": False, "error": "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏"})
        admin_text = request.form.get("admin_text", "").strip()
        display_text = request.form.get("display_text", "").strip()
        question = request.form.get("question", "").strip().lower()
        category = request.form.get("category", "attractions")
        price_info = request.form.get("price_info", "")
        suggestion_topic = request.form.get("suggestion_topic", "default")
        if not admin_text or not display_text or not question:
            return jsonify({"success": False, "error": "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"})
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞)
        for i, item in enumerate(menu_items):
            if i != index:
                if item.get("admin_text") == admin_text:
                    return jsonify({"success": False, "error": "–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
                if item.get("question") == question:
                    return jsonify({"success": False, "error": "–ö–Ω–æ–ø–∫–∞ —Å —Ç–∞–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"})
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
        menu_items[index] = {
            "admin_text": admin_text,
            "display_text": display_text,
            "question": question,
            "category": category,
            "price_info": price_info,
            "suggestion_topic": suggestion_topic
        }
        save_menu(menu_items)
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é: {admin_text} -> {question} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category})")
        return jsonify({"success": True})
    except Exception as e:
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"})

@app.route("/admin/menu/delete/<int:index>")
def delete_menu_item(index):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    try:
        menu_items = load_menu()
        if 0 <= index < len(menu_items):
            removed = menu_items.pop(index)
            save_menu(menu_items)
            flash(f"‚úÖ –ö–Ω–æ–ø–∫–∞ '{removed['admin_text']}' —É–¥–∞–ª–µ–Ω–∞", "success")
            logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –∫–Ω–æ–ø–∫—É –∏–∑ –º–µ–Ω—é: {removed['admin_text']}")
        else:
            flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–Ω–æ–ø–∫–∏", "error")
    except Exception as e:
        flash(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}", "error")
    return redirect(url_for("admin_menu"))

@app.route('/menu-items')
@no_cache
def get_menu_items():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    menu_items = load_menu()
    return jsonify({"items": menu_items})

@app.route('/menu-items/<category>')
@no_cache
def get_menu_items_by_category(category):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    menu_items = load_menu()
    filtered_items = [item for item in menu_items if item.get("category") == category]
    return jsonify({"items": filtered_items})

@app.route("/admin/menu/categories/data")
def get_categories_data():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if not session.get("admin_logged_in"):
        return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
    categories = load_menu_categories()
    return jsonify(categories)

@app.route("/admin/menu/categories")
def admin_menu_categories():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–º–∞–º–∏ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏) –º–µ–Ω—é"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    categories = load_menu_categories()
    return render_template("admin/menu_categories.html", 
                         categories=categories,
                         system_categories=SYSTEM_CATEGORIES)

@app.route("/admin/menu/categories", methods=["POST"])
def add_menu_category():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    key = request.form.get("category_key", "").strip().lower()
    name = request.form.get("category_name", "").strip()
    if not key or not name:
        flash("‚ùå –û–±–∞ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", "error")
        return redirect(url_for("admin_menu_categories"))
    if not re.match(r'^[a-z0-9_]+$', key):
         flash("‚ùå –ö–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ", "error")
         return redirect(url_for("admin_menu_categories"))
    categories = load_menu_categories()
    if key in categories.get("system_categories", {}) or key in categories.get("custom_categories", {}):
        flash("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "error")
        return redirect(url_for("admin_menu_categories"))
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    custom_categories = categories.get("custom_categories", {})
    custom_categories[key] = name
    categories["custom_categories"] = custom_categories
    save_menu_categories(categories)
    flash(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", "success")
    logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é: {key} -> {name}")
    return redirect(url_for("admin_menu_categories"))

@app.route("/admin/menu/categories/delete/<string:key>")
def delete_menu_category(key):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)"""
    if not session.get("admin_logged_in"):
        flash("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", "error")
        return redirect(url_for("admin_login"))
    if key in SYSTEM_CATEGORIES:
        flash("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", "error")
        return redirect(url_for("admin_menu_categories"))
    categories = load_menu_categories()
    if key in categories.get("custom_categories", {}):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        menu_items = load_menu()
        if any(item.get("category") == key for item in menu_items):
            flash("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é", "error")
            return redirect(url_for("admin_menu_categories"))
        del categories["custom_categories"][key]
        save_menu_categories(categories)
        flash(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{key}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", "success")
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é: {key}")
    else:
        flash("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
    return redirect(url_for("admin_menu_categories"))

@app.route("/admin/login", methods=["GET", "POST"])
def admin_login():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
    if request.method == "POST":
        username = request.form.get("username")
        password = request.form.get("password")
        if username == os.getenv("ADMIN_USER", "admin") and password == os.getenv("ADMIN_PASS", "1"):
            session["admin_logged_in"] = True
            session["admin_user"] = username
            logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É")
            return redirect(url_for("admin_dashboard"))
        flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å", "error")
        logging.warning("–ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É")
    return render_template("admin/login.html")

@app.route("/admin")
def admin_dashboard():
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω–∫–∏"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    return render_template("admin/dashboard.html", bookings=BOOKINGS)

@app.route("/admin/knowledge", methods=["GET", "POST"])
def knowledge_edit():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å PostgreSQL"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
        
    if request.method == "POST":
        action = request.form.get("action")
        question = request.form.get("question", "").strip().lower()
        answer = request.form.get("answer", "").strip()
        old_question = request.form.get("old_question", "").strip().lower()
        
        if action == "add":
            if question and answer:
                if add_knowledge_item(question, answer, session.get("admin_user", "admin")):
                    flash("‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω", "success")
                    logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                else:
                    flash("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞", "error")
            else:
                flash("‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã", "error")
                
        elif action == "edit":
            if question and answer and old_question:
                if update_knowledge_item(old_question, question, answer, session.get("admin_user", "admin")):
                    flash("‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª—ë–Ω", "success")
                    logging.info(f"–ò–∑–º–µ–Ω—ë–Ω –≤–æ–ø—Ä–æ—Å: '{old_question}' -> '{question}'")
                else:
                    flash("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞", "error")
            else:
                flash("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "error")
                
        elif action == "delete":
            if question:
                if delete_knowledge_item(question):
                    flash("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω", "success")
                    logging.info(f"–£–¥–∞–ª—ë–Ω –≤–æ–ø—Ä–æ—Å: '{question}'")
                else:
                    flash("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞", "error")
            else:
                flash("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
                
        elif action == "search":
            search_query = request.form.get("search_query", "").strip()
            if search_query:
                results = search_knowledge(search_query)
                knowledge = {result['question']: result['answer'] for result in results}
                return render_template("admin/knowledge_edit.html", 
                                    knowledge=knowledge, 
                                    search_query=search_query)
            else:
                flash("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", "error")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    load_knowledge_base()
    return render_template("admin/knowledge_edit.html", knowledge=KNOWLEDGE_BASE)

@app.route("/admin/logs")
def view_logs():
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    logs = []
    if os.path.exists(LOG_FILE):
        try:
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
            logs = sorted(logs, key=lambda x: x["timestamp"], reverse=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            flash("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–æ–≤", "error")
    return render_template("admin/logs.html", logs=logs)

@app.route("/admin/edit_response", methods=["POST"])
def edit_response():
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ PostgreSQL"""
    if not session.get("admin_logged_in"):
        return jsonify({"status": "error", "message": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
        
    question = request.form.get("question")
    new_answer = request.form.get("answer")
    
    if question and new_answer:
        if add_knowledge_item(question, new_answer, session.get("admin_user", "admin")):
            return jsonify({"status": "ok"})
        else:
            return jsonify({"status": "error", "message": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î"}), 500
            
    return jsonify({"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}), 400

@app.route("/admin/export_logs")
def export_logs():
    """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not session.get("admin_logged_in"):
        return redirect(url_for("admin_login"))
    if os.path.exists(LOG_FILE):
        return send_from_directory(".", "bot_log.json", as_attachment=True)
    flash("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
    return redirect(url_for("view_logs"))

@app.route("/admin/logout")
def admin_logout():
    """–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏"""
    session.pop("admin_logged_in", None)
    session.pop("admin_user", None)
    flash("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", "info")
    logging.info("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")
    return redirect(url_for("index"))

@app.route("/static/<path:path>")
def send_static(path):
    """–†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏"""
    return send_from_directory("static", path)

@app.route("/booking", methods=["GET", "POST"])
def booking():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if request.method == "POST":
        name = request.form.get("name")
        phone = request.form.get("phone")
        date = request.form.get("date")
        guests = request.form.get("guests")
        event_type = request.form.get("event_type")
        if name and phone and date and guests and event_type:
            new_booking = {
                "name": name,
                "phone": phone,
                "date": date,
                "guests": guests,
                "event_type": event_type,
                "timestamp": datetime.now().isoformat()
            }
            BOOKINGS.append(new_booking)
            save_bookings()
            logging.info(f"–ù–æ–≤–∞—è –±—Ä–æ–Ω—å: {name}, {phone}")
            return render_template("booking.html", success="–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    return render_template("booking.html")

@app.route("/birthday_calc")
def birthday_calc():
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
    return render_template("birthday_calc.html")

@app.route("/suggestions/all")
def get_all_suggestions():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è frontend"""
    return jsonify({"suggestions": suggestionMap})

@app.route("/debug-all-buttons")
def debug_all_buttons():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    menu_items = load_menu()
    debug_info = {}
    
    for item in menu_items:
        topic = item.get("suggestion_topic")
        debug_info[item["admin_text"]] = {
            "question": item["question"],
            "suggestion_topic": topic,
            "suggestions_count": len(suggestionMap.get(topic, [])),
            "suggestions": suggestionMap.get(topic, [])
        }
    
    return jsonify(debug_info)

@app.route("/debug-platnie-uslugi")
def debug_platnie_uslugi():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏"""
    menu_items = load_menu()
    platnie_item = None
    
    for item in menu_items:
        if item.get("admin_text") == "–ü–ª–∞—Ç–Ω—ã–µ —É—Å–ª—É–≥–∏":
            platnie_item = item
            break
    
    debug_info = {
        "platnie_item": platnie_item,
        "suggestion_topic": platnie_item.get("suggestion_topic") if platnie_item else None,
        "suggestions_for_topic": suggestionMap.get(platnie_item.get("suggestion_topic", "")) if platnie_item else None,
        "all_topics": list(suggestionMap.keys())
    }
    
    return jsonify(debug_info)

@app.route("/debug-current-menu")
def debug_current_menu():
    """–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é"""
    menu_items = load_menu()
    return jsonify({
        "menu_items": menu_items,
        "menu_cache": MENU_CACHE is not None
    })

@app.route("/clear-cache-now")
def clear_cache_now():
    """–°—Ä–æ—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–µ–Ω—é"""
    global MENU_CACHE
    MENU_CACHE = None
    load_menu()
    return "‚úÖ –ö—ç—à –º–µ–Ω—é –æ—á–∏—â–µ–Ω! –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–∞—Ç–∞."

@app.route("/debug-normalize")
def debug_normalize():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏"""
    test_questions = [
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–∏–µ–º?",
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–∏–µ–º",
        "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–∏–µ–º!",
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–∏–µ–º.",
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–∏–µ–º ",
        " –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–∏–µ–º ",
        "–∫–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤—Ä–∞—á—É –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–∏–µ–º"
    ]
    
    results = []
    for q in test_questions:
        results.append({
            "original": q,
            "normalized": normalize_text(q),
            "in_knowledge_base": normalize_text(q) in [normalize_text(k) for k in KNOWLEDGE_BASE.keys()]
        })
    
    return jsonify(results)

def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è IP: {e}")
        return "127.0.0.1"

def call_yandex_gpt(prompt, history=None):
    """–í—ã–∑–æ–≤ Yandex GPT —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {os.getenv('YANDEX_API_KEY')}",
        "x-folder-id": os.getenv("YANDEX_FOLDER_ID"),
        "Content-Type": "application/json"
    }
    system_prompt = """
    –¢—ã - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.
    –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∞, —Å–æ–±–ª—é–¥–∞–π –≤—Ä–∞—á–µ–±–Ω—É—é —ç—Ç–∏–∫—É.
    –¢—ã ‚Äì –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å –ø—Ä–æ —É—Å–ª—É–≥–∏ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∏:
    –ü—Ä–µ–¥–ª–æ–∂–∏ –∑–∞–¥–∞–≤–∞—Ç—å —Ç–µ–±–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.
    –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ü–µ–Ω—ã ‚Äì –µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å, —Å–∫–∞–∂–∏ —á–µ—Å—Ç–Ω–æ, –Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å.
    –í—Å–µ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–º –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥.
    """
    messages = [{"role": "system", "text": system_prompt}]
    if history:
        messages.extend(history)
    messages.append({"role": "user", "text": prompt})
    payload = {
        "modelUri": f"gpt://{os.getenv('YANDEX_FOLDER_ID')}/yandexgpt-lite",
        "completionOptions": {
            "stream": False,
            "temperature": 0.3,
            "maxTokens": 1000
        },
        "messages": messages
    }
    for attempt in range(3):
        try:
            response = requests.post(url, headers=headers, json=payload, timeout=10)
            if response.status_code == 200:
                return response.json()["result"]["alternatives"][0]["message"]["text"]
            elif response.status_code == 401:
                return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á."
            elif response.status_code == 400:
                return "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ folder_id."
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ GPT (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {str(e)}")
        time.sleep(1)
    return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def log_interaction(question, answer, source):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ bot_log.json"""
    log_entry = {
        "timestamp": datetime.now().isoformat(),
        "question": question,
        "answer": answer,
        "source": source
    }
    try:
        logs = []
        if os.path.exists(LOG_FILE):
            with open(LOG_FILE, "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:
                    logs = json.loads(content)
        logs.append(log_entry)
        if len(logs) % 100 == 0:
            backup_path = os.path.join(BACKUPS_DIR, f"bot_log_{int(time.time())}.json")
            shutil.copy2(LOG_FILE, backup_path)
            print(f"üîÑ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, ensure_ascii=False, indent=4)
        print("‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–≥")
        logging.info("–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–≥")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

# ===================================================================================
# üîä –ù–û–í–´–ô –ú–ê–†–®–†–£–¢: TTS —á–µ—Ä–µ–∑ Yandex SpeechKit
# ===================================================================================

@app.route('/tts')
def text_to_speech():
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ SSML –≤ —Ä–µ—á—å —á–µ—Ä–µ–∑ Yandex SpeechKit.
    –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—É–∑, –≥–æ–ª–æ—Å–æ–≤ –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–π —á–µ—Ä–µ–∑ <speak> –∏ <break>
    """
    text = request.args.get('text', '').strip()
    use_ssml = request.args.get('ssml', 'false').lower() == 'true'
    voice = request.args.get('voice', 'alena')  # –ú–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≥–æ–ª–æ—Å
    if not text:
        return '', 400

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Ç–µ–∫—Å—Ç
    text = unquote(text)
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª –≤ –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
    def convert_number_to_text(number):
        numbers = {
            1: '–ø–µ—Ä–≤–æ–µ',
            2: '–≤—Ç–æ—Ä–æ–µ', 
            3: '—Ç—Ä–µ—Ç—å–µ',
            4: '—á–µ—Ç–≤–µ—Ä—Ç–æ–µ',
            5: '–ø—è—Ç–æ–µ',
            6: '—à–µ—Å—Ç–æ–µ',
            7: '—Å–µ–¥—å–º–æ–µ',
            8: '–≤–æ—Å—å–º–æ–µ',
            9: '–¥–µ–≤—è—Ç–æ–µ',
            10: '–¥–µ—Å—è—Ç–æ–µ',
            11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            13: '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            14: '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            15: '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            16: '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            17: '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            18: '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            19: '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            20: '–¥–≤–∞–¥—Ü–∞—Ç–æe'
        }
        return numbers.get(number, str(number))
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç
    def convert_day_to_text(day):
        days = {
            1: '–ø–µ—Ä–≤–æ–µ', 2: '–≤—Ç–æ—Ä–æ–µ', 3: '—Ç—Ä–µ—Ç—å–µ', 4: '—á–µ—Ç–≤–µ—Ä—Ç–æ–µ', 5: '–ø—è—Ç–æ–µ',
            6: '—à–µ—Å—Ç–æ–µ', 7: '—Å–µ–¥—å–º–æ–µ', 8: '–≤–æ—Å—å–º–æ–µ', 9: '–¥–µ–≤—è—Ç–æ–µ', 10: '–¥–µ—Å—è—Ç–æ–µ',
            11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–µ', 12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–µ', 13: '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–µ', 14: '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            15: '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ', 16: '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ', 17: '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ', 18: '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç–æ–µ',
            19: '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ', 20: '–¥–≤–∞–¥—Ü–∞—Ç–æ–µ', 21: '–¥–≤–∞–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ', 22: '–¥–≤–∞–¥—Ü–∞—Ç—å –≤—Ç–æ—Ä–æ–µ',
            23: '–¥–≤–∞–¥—Ü–∞—Ç—å —Ç—Ä–µ—Ç—å–µ', 24: '–¥–≤–∞–¥—Ü–∞—Ç—å —á–µ—Ç–≤–µ—Ä—Ç–æ–µ', 25: '–¥–≤–∞–¥—Ü–∞—Ç—å –ø—è—Ç–æ–µ',
            26: '–¥–≤–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç–æ–µ', 27: '–¥–≤–∞–¥—Ü–∞—Ç—å —Å–µ–¥—å–º–æ–µ', 28: '–¥–≤–∞–¥—Ü–∞—Ç—å –≤–æ—Å—å–º–æ–µ',
            29: '–¥–≤–∞–¥—Ü–∞—Ç—å –¥–µ–≤—è—Ç–æ–µ', 30: '—Ç—Ä–∏–¥—Ü–∞—Ç–æ–µ', 31: '—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø–µ—Ä–≤–æ–µ'
        }
        return days.get(day, str(day))
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è TTS
   
       # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è TTS
    import re
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    def is_phone_number(text):
        phone_patterns = [
            r'\(\d{3}\)\s?\d{3}\s?\d{2}\s?\d{2}',  # (495) 123 45 67
            r'\d{3}-\d{2}-\d{2}',                   # 123-45-67
            r'\d{3}\s\d{2}\s\d{2}',                 # 123 45 67
        ]
        return any(re.search(pattern, text) for pattern in phone_patterns)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä
    def convert_single_digit(digit):
        digits = {
            0: '–Ω–æ–ª—å',
            1: '–æ–¥–∏–Ω', 
            2: '–¥–≤–∞',
            3: '—Ç—Ä–∏',
            4: '—á–µ—Ç—ã—Ä–µ',
            5: '–ø—è—Ç—å',
            6: '—à–µ—Å—Ç—å',
            7: '—Å–µ–º—å',
            8: '–≤–æ—Å–µ–º—å',
            9: '–¥–µ–≤—è—Ç—å'
        }
        return digits.get(digit, str(digit))

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–≤—É–∑–Ω–∞—á–Ω—ã—Ö —á–∏—Å–µ–ª
    def convert_two_digit_number(number):
        if number < 10:
            return convert_single_digit(number)
        
        numbers = {
            10: '–¥–µ—Å—è—Ç—å',
            11: '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å',
            12: '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å', 
            13: '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å',
            14: '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å',
            15: '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å',
            16: '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å',
            17: '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å',
            18: '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å',
            19: '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å',
            20: '–¥–≤–∞–¥—Ü–∞—Ç—å',
            30: '—Ç—Ä–∏–¥—Ü–∞—Ç—å',
            40: '—Å–æ—Ä–æ–∫',
            50: '–ø—è—Ç—å–¥–µ—Å—è—Ç',
            60: '—à–µ—Å—Ç—å–¥–µ—Å—è—Ç',
            70: '—Å–µ–º—å–¥–µ—Å—è—Ç',
            80: '–≤–æ—Å–µ–º—å–¥–µ—Å—è—Ç',
            90: '–¥–µ–≤—è–Ω–æ—Å—Ç–æ'
        }
        
        if number in numbers:
            return numbers[number]
        else:
            tens = (number // 10) * 10
            units = number % 10
            if units == 0:
                return numbers.get(tens, str(tens))
            else:
                return f"{numbers.get(tens, str(tens))} {convert_single_digit(units)}"

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
    def convert_phone_number(text):
        def replace_phone_numbers(match):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
            numbers = re.findall(r'\d+', match.group())
            result = []
            
            for num in numbers:
                if num == '00':  # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –¥–≤–æ–π–Ω–æ–≥–æ –Ω—É–ª—è
                    result.append('–Ω–æ–ª—å –Ω–æ–ª—å')
                elif len(num) == 1:  # –û–¥–∏–Ω–æ—á–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
                    result.append(convert_single_digit(int(num)))
                elif len(num) == 2:  # –î–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞
                    # –í —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö –¥–≤—É–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏–∑–Ω–æ—Å—è—Ç—Å—è –∫–∞–∫ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                    result.append(convert_two_digit_number(int(num)))
                else:  # –¢—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–µ –∏ –±–æ–ª–µ–µ (–∫–æ–¥—ã –≥–æ—Ä–æ–¥–æ–≤)
                    # –ü—Ä–æ–∏–∑–Ω–æ—Å–∏–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ü–∏—Ñ—Ä–∞–º
                    result.append(' '.join([convert_single_digit(int(d)) for d in num]))
            
            return ' '.join(result)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
        phone_pattern = r'\(\d{3}\)\s?\d{3}\s?\d{2}\s?\d{2}'
        return re.sub(phone_pattern, replace_phone_numbers, text)

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if is_phone_number(text):
        processed_text = convert_phone_number(text)
    else:
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –Ω–µ-—Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ (1., 2., 3. –∏ —Ç.–¥.)
        processed_text = re.sub(r'(\d+)\.\s+', lambda m: f"{convert_number_to_text(int(m.group(1)))}. ", text)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã (–¥–¥.–º–º.–≥–≥–≥–≥)
        date_pattern = r'(\d{2})\.(\d{2})\.(\d{4})'
        def replace_date(match):
            day = int(match.group(1))
            month = int(match.group(2))
            year = int(match.group(3))
            
            months = [
                '', '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
                '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
            ]
            
            day_text = convert_day_to_text(day)
            month_text = months[month] if 1 <= month <= 12 else str(month)
            
            # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≥–æ–¥–∞
            year_text = str(year)
            if year >= 2000:
                year_text = f"–¥–≤–µ —Ç—ã—Å—è—á–∏ {convert_number_to_text(year - 2000)}" if year > 2000 else "–¥–≤—É—Ö—Ç—ã—Å—è—á–Ω–æ–≥–æ"
            
            return f"{day_text} {month_text} {year_text} –≥–æ–¥–∞"
        
        processed_text = re.sub(date_pattern, replace_date, processed_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
        processed_text = re.sub(r'\n\s*\n', ' <break time="900ms"/> ', processed_text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        processed_text = re.sub(r'\s+', ' ', processed_text).strip()
    
    # –£–±–∏—Ä–∞–µ–º Markdown-—Ä–∞–∑–º–µ—Ç–∫—É
    processed_text = re.sub(r'\*\*|\*|~~|`', '', processed_text)
    
    url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
    headers = {
        "Authorization": f"Api-Key {os.getenv('YANDEX_API_KEY')}"
    }

    # –ï—Å–ª–∏ use_ssml=True ‚Äî –æ–±—Ä–∞–º–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ <speak>
    final_text = f"<speak>{processed_text}</speak>" if use_ssml else processed_text

    data = {
        "text": final_text,
        "lang": "ru-RU",
        "voice": voice,
        "format": "mp3",
        "sampleRateHertz": 48000
    }

    # –î–ª—è SSML –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PCM (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    if use_ssml:
        data["format"] = "lpcm"
        data["sampleRateHertz"] = 48000

    try:
        tts_response = requests.post(url, headers=headers, data=data, stream=True)
        if tts_response.status_code != 200:
            print("TTS Error:", tts_response.text)
            return '', 500

        return Response(
            tts_response.iter_content(chunk_size=1024),
            mimetype="audio/mpeg"  # –∏–ª–∏ "audio/x-lpcm", –µ—Å–ª–∏ format=lpcm
        )
    except Exception as e:
        print("TTS Request failed:", str(e))
        return '', 500

# ===================================================================================

@app.route("/admin/knowledge/import", methods=["POST"])
def import_knowledge():
    """–ú–∞—Å—Å–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤"""
    if not session.get("admin_logged_in"):
        return jsonify({"success": False, "error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}), 403
        
    try:
        data = request.json
        if not data or not isinstance(data, dict):
            return jsonify({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"})
            
        success_count = 0
        error_count = 0
        
        for question, answer in data.items():
            if question and answer:
                if add_knowledge_item(question, answer, session.get("admin_user", "admin")):
                    success_count += 1
                else:
                    error_count += 1
        
        return jsonify({
            "success": True,
            "message": f"–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count} —É—Å–ø–µ—à–Ω–æ, {error_count} –æ—à–∏–±–æ–∫"
        })
        
    except Exception as e:
        return jsonify({"success": False, "error": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}"})


if __name__ == "__main__":
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    if init_knowledge_db():
        load_knowledge_base()
    else:
        print("‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
        load_knowledge_base()
    
    port = int(os.getenv("PORT", 5000))
    debug = os.getenv("FLASK_DEBUG", "false").lower() == "true"
    local_ip = get_local_ip()
    print(f"üåê –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞:")
    print(f"   üñ•Ô∏è  –í –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏: http://{local_ip}:{port}")
    print(f"   üîê  –ù–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: http://localhost:{port} –∏–ª–∏ http://127.0.0.1:{port}")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ CTRL+C")
    app.run(host="0.0.0.0", port=port, debug=debug)
